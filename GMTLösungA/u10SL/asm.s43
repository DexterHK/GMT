#include "msp430.h"                     ; #define controlled include file
LED1    EQU     BIT0
S2      EQU     BIT1
Reset   EQU     BIT1
LED2    EQU     BIT7
Delay  EQU      50000
MASK    EQU     11111111B
DelayEasy EQU   100
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
       
         BIC.B #0x01,&P6SEL              ;P6.0 (=A0) als I/O

         BIC.W #ADC12ENC,&ADC12CTL0      ;make sure conversion disabled
         MOV.W #ADC12ON, &ADC12CTL0      ; ADC12_A on
 
         ; clock source ADC12  |  Single-channel-single conversion  | divider 8
         MOV.W #ADC12SSEL_0 | ADC12CONSEQ_0 | ADC12DIV_0, &ADC12CTL1
         BIS.W #ADC12SHP, &ADC12CTL1            ; Sample-and-hold by time
        
         MOV.B #ADC12SREF_0, &ADC12MCTL0        ; Reference ACSS..AVCC
         BIS.B #ADC12INCH0, &ADC12MCTL0        ;Input Channel select A0
        
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        
        BIS.B   #LED1,&P1DIR            ;Output
        BIC.B   #LED1,&P1OUT            ;Auschalten

        BIS.B   #LED2,&P4DIR            ;Output 
        BIC.B   #LED2,&P4OUT            ; Ausschalten

        BIC.B #S2,&P2DIR          ;If DIR 1 == Output, also 0 Input
        BIS.B #S2,&P2REN         ;IF Pull-Up oder Down = 1, Input without pull up or down = 0
        BIS.B #S2,&P2OUT         ;If 0 == Pull Down, 1 == Pull Up

        BIC.B #Reset,&P1DIR          ;If DIR 1 == Output, also 0 Input
        BIS.B #Reset,&P1REN         ;IF Pull-Up oder Down = 1, Input without pull up or down = 0
        BIS.B #Reset,&P1OUT         ;If 0 == Pull Down, 1 == Pull Up
        mov.B #0x0,R6                 ; How fast is the player
        mov.B #0x0,R7                ; Delay Counter
        MOV.B #0x0,R8                ;Carry Flag
        MOV.B 0x0,R9                 ;Easy Delay
         BIS.W #ADC12ENC, &ADC12CTL0  ;ADC12_A enable  conversion
         BIS.W #ADC12SC, &ADC12CTL0
        
TimerBusy:
        BIT.W #ADC12BUSY, &ADC12CTL1  ;ADC12_A busy?
        JNZ TimerBusy                 ;yes: check again
        MOV.W &ADC12MEM0, R5          ;no: copy conversion result to R5

WaitRandom:
       CALL #WaitingEasy              ; One "easy" einfaches Delay aufrufen
       DEC  R5                       ;  Decrementiere R5
       JNZ WaitRandom                ; Wenn R5 nicht 0 ist, dann Jump zu WaitRandom

GrunOn:
        BIS.B   #LED2,&P4OUT          ; aufleuchten
PressButtonTwo:
        INC R6                       ;Incrementiere R6. R6 ist unser Counter
        ADC R8                       ;Bei overflow sollte R8 incrementiert werden
        BIT.B #S2, &P2IN             ; Warte auf Tastendruck
        JNZ PressButtonTwo           ; Kein Tastendruck == GOTO PressButtonTwo  

Calculate:                           ;Calculate berechnet, wie schnell der Tastendruck war
       CMP.B #0x1,R8                ;Falls ein overflow gab
       JGE Three                    ; Leuchte dreimal
       CMP.W #010000000000000B,R6   ; #010000000000000B => Der Wert, der unterscheidet, ob es 1 oder 2 mal leuchten soll.
       JGE One                      ; Ist das Register R6 kleiner als der Wert => Leuchte einmal
       JMP Two                     ; Ist das Register R6 größer als der Wert => Leuchte zweimal

  ;Option 1     
One: ;Leuchte einmal
      CALL #Light      ;Call Light
      JMP WaitForReset   ;GOTO WaitForReset => Auf reset button warten
;Option 2
Two:                ;Leuchte Zweimal
      CALL #Light  ;Call Light
      CALL #Waiting  ; Call Delay
      CALL #Light     ;Call Light
      JMP WaitForReset ;GOTO WaitForReset => Auf reset button warten
   
 ;Option 3     
Three:               ;Leuchte dreimal
      CALL #Light       ;Call Light
      CALL #Waiting     ; Call Delay
      CALL #Light       ;Call Light
      CALL #Waiting    ;Call Delay
      CALL #Light       ;Call Light
      JMP WaitForReset   ;GOTO WaitForReset => Auf reset button warten
      
WaitForReset:
      BIT.B #Reset, &P1IN   ;1. Warte auf Tastendruck
      JNZ WaitForReset      ;2. Fall keinen gibt => GOTO 1
      JMP Reseting          ;Fall einen gibt => GOTO Reset
      
Reseting:                   ;Alle Register auf 0 setzen und zurück zum Code-Anfang springen
      mov #0x0,R6          
      mov #0x0,R7
      mov #0x0,R8
      JMP TimerBusy
      

Waiting:
       INC.W  R7              ;1. Increment R7    
       CMP.W #Delay,R7       ;2. Ist 50000 == R7?
       JNE   Waiting         ;3. Falls nicht Equal => 50000 != R7 => GOTO 1
       MOV.W #0x0,R7         ;Ist R7 == 50000 => Setze R7 um 0
       ret                   ;Return
      
Light:
      BIC.B  #LED2,&P4OUT           ;Grünes LED Ausschalten 
      BIS.B  #LED1,&P1OUT           ;Rotes LED Einschalten
      CALL   #Waiting               ; Warte 
      BIC.B  #LED1,&P1OUT            ;Rotes LED Auschalten 
      ret
 
WaitingEasy: 
       INC.W  R9                  ;1. Inkrementiere den 3 Counter
       CMP.W #DelayEasy,R9        ;2. Ist R9 == 100 ? 
       JNE   WaitingEasy          ; Falls 2 falsch ist => gehe zurück zu 1
       MOV.W #0x0,R9              ; R9 um 0 setzen
       ret



      

        

        END
